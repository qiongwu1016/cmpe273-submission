# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: replicator.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='replicator.proto',
  package='',
  syntax='proto3',
  serialized_options=None,
  serialized_pb=_b('\n\x10replicator.proto\"\x14\n\x03Wal\x12\r\n\x05value\x18\x01 \x01(\t2&\n\tLogicCopy\x12\x19\n\tlogicCopy\x12\x04.Wal\x1a\x04.Wal\"\x00\x62\x06proto3')
)




_WAL = _descriptor.Descriptor(
  name='Wal',
  full_name='Wal',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='value', full_name='Wal.value', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=20,
  serialized_end=40,
)

DESCRIPTOR.message_types_by_name['Wal'] = _WAL
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

Wal = _reflection.GeneratedProtocolMessageType('Wal', (_message.Message,), dict(
  DESCRIPTOR = _WAL,
  __module__ = 'replicator_pb2'
  # @@protoc_insertion_point(class_scope:Wal)
  ))
_sym_db.RegisterMessage(Wal)



_LOGICCOPY = _descriptor.ServiceDescriptor(
  name='LogicCopy',
  full_name='LogicCopy',
  file=DESCRIPTOR,
  index=0,
  serialized_options=None,
  serialized_start=42,
  serialized_end=80,
  methods=[
  _descriptor.MethodDescriptor(
    name='logicCopy',
    full_name='LogicCopy.logicCopy',
    index=0,
    containing_service=None,
    input_type=_WAL,
    output_type=_WAL,
    serialized_options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_LOGICCOPY)

DESCRIPTOR.services_by_name['LogicCopy'] = _LOGICCOPY

# @@protoc_insertion_point(module_scope)
